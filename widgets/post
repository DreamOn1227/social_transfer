import 'dart:async';

import 'package:animator/animator.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:killacam_social/models/app_user.dart';
import 'package:killacam_social/pages/activity_feed_page.dart';
import 'package:killacam_social/pages/comments_page.dart';
import 'package:killacam_social/pages/home_page.dart';
import 'package:killacam_social/widgets/brand_circular_progress.dart';

import 'custom_image.dart';

class Post extends StatefulWidget {
  const Post({
    Key? key,
    required this.postId,
    required this.ownerId,
    required this.userName,
    this.location,
    this.description,
    required this.mediaUrl,
    this.likes,
  }) : super(key: key);

  final String postId;
  final String ownerId;
  final String userName;
  final String? location;
  final String? description;
  final String mediaUrl;
  final dynamic likes;

  factory Post.fromDocument(DocumentSnapshot doc) {
    return Post(
      postId: doc['postId'],
      ownerId: doc['ownerId'],
      userName: doc['userName'],
      location: doc['location'],
      description: doc['description'],
      mediaUrl: doc['mediaUrl'],
      likes: doc['likes'],
    );
  }

  int getLikeCount(likes) {
    if (likes == null) {
      return 0;
    }
    int count = 0;
    likes.values.forEach((val) {
      if (val == true) {
        count += 1;
      }
    });
    return count;
  }

  @override
  _PostState createState() => _PostState(
        likes: likes,
        likeCount: getLikeCount(likes),
        description: description,
        location: location,
        userName: userName,
        ownerId: ownerId,
        postId: postId,
        mediaUrl: mediaUrl,
      );
}

class _PostState extends State<Post> {
  _PostState({
    required this.postId,
    required this.ownerId,
    required this.userName,
    this.location,
    this.description,
    required this.mediaUrl,
    this.likes,
    required this.likeCount,
    this.isLiked,
  });

  final String? currentUserId = currentUser?.id;
  final String postId;
  final String ownerId;
  final String userName;
  final String? location;
  final String? description;
  final String mediaUrl;
  Map? likes;
  int likeCount;
  bool? isLiked;
  bool showHeart = false;

  FutureBuilder<DocumentSnapshot<Object>> buildPostHeader() {
    return FutureBuilder<DocumentSnapshot<Object>>(
        future: usersRef.doc(ownerId).get(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return const BrandCircularProgress();
          }
          AppUser user = AppUser.fromDocument(
            snapshot.data,
          );
          return ListTile(
            leading: CircleAvatar(
              backgroundColor: Colors.grey,
              backgroundImage: CachedNetworkImageProvider(
                user.photoUrl,
              ),
            ),
            subtitle: Text(
              location!,
            ),
            title: GestureDetector(
              onTap: () => showProfile(
                context,
                profileId: user.id,
              ),
              child: Text(
                user.userName,
                style: const TextStyle(
                  color: Colors.black,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            trailing: IconButton(
              icon: const Icon(
                Icons.more_vert,
              ),
              onPressed: () => print('deleting post'),
            ),
          );
        });
  }

  handleLikePost() {
    bool _isLiked = likes?[currentUserId] == true;
    if (_isLiked) {
      postsRef.doc(ownerId).collection('userPosts').doc(postId).update({
        'likes.$currentUserId': false,
      });
      removeLikeFromActivityFeed();
      setState(() {
        likeCount -= 1;
        isLiked = false;
        likes?[currentUserId] = false;
      });
    } else if (!_isLiked) {
      postsRef.doc(ownerId).collection('userPosts').doc(postId).update({
        'likes.$currentUserId': true,
      });
      addLikeToActivityFeed();
      setState(() {
        likeCount += 1;
        isLiked = true;
        likes?[currentUserId] = true;
        showHeart = true;
      });
      Timer(
          const Duration(
            milliseconds: 500,
          ), () {
        setState(() {
          showHeart = false;
        });
      });
    }
  }

  addLikeToActivityFeed() {
    bool isNotPostOwner = currentUserId != ownerId;
    if (isNotPostOwner) {
      activityFeedRef
          .doc(
            ownerId,
          )
          .collection('feedItems')
          .doc(postId)
          .set({
        'type': 'like',
        'userName': currentUser?.userName,
        'userId': currentUser?.id,
        'userProfileImg': currentUser?.photoUrl,
        'postId': postId,
        'mediaUrl': mediaUrl,
        'timestamp': timestamp,
      });
    }
  }

  removeLikeFromActivityFeed() {
    bool isNotPostOwner = currentUserId != ownerId;
    if (isNotPostOwner) {
      activityFeedRef
          .doc(
            ownerId,
          )
          .collection('feedItems')
          .doc(postId)
          .get()
          .then((doc) {
        if (doc.exists) {
          doc.reference.delete();
        }
      });
    }
  }

  GestureDetector buildPostImage() {
    return GestureDetector(
      onDoubleTap: handleLikePost,
      child: Stack(
        alignment: Alignment.center,
        children: <Widget>[
          CustomImage(mediaUrl: mediaUrl),
          showHeart
              ? Animator(
                  builder: (context, animatorState, child) => Transform.scale(
                    scale: 1.2,
                    child: const Icon(
                      Icons.favorite,
                      size: 80.0,
                      color: Colors.red,
                    ),
                  ),
                  curve: Curves.elasticOut,
                  cycles: 0,
                  duration: const Duration(
                    milliseconds: 300,
                  ),
                  tween: Tween(
                    begin: 0.8,
                    end: 1.4,
                  ),
                )
              : const Text(''),
        ],
      ),
    );
  }

  Column buildPostFooter() {
    return Column(
      children: <Widget>[
        Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            const Padding(
              padding: EdgeInsets.only(
                top: 40.0,
                left: 20.0,
              ),
            ),
            GestureDetector(
              onTap: handleLikePost,
              child: Icon(
                isLiked! ? Icons.favorite : Icons.favorite_border,
                color: Colors.pink,
                size: 28.0,
              ),
            ),
            const Padding(
              padding: EdgeInsets.only(
                right: 20.0,
              ),
            ),
            GestureDetector(
              onTap: () => showComments(
                context,
                postId: postId,
                ownerId: ownerId,
                mediaUrl: mediaUrl,
              ),
              child: const Icon(
                Icons.comment,
                color: Color(0xff271c3b),
                size: 28.0,
              ),
            ),
          ],
        ),
        Row(
          children: <Widget>[
            Container(
              margin: const EdgeInsets.only(
                left: 20.0,
              ),
              child: Text(
                '$likeCount likes',
                style: const TextStyle(
                  color: Colors.black,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Container(
              margin: const EdgeInsets.only(
                left: 20.0,
              ),
              child: Text(
                '$userName ',
                style: const TextStyle(
                  color: Colors.black,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            Expanded(
              child: Text(
                description!,
              ),
            ),
          ],
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    isLiked = (likes?[currentUserId] == true);
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        buildPostHeader(),
        buildPostImage(),
        buildPostFooter(),
        // PostImage(
        //   handleLikePost: handleLikePost,
        //   mediaUrl: mediaUrl,
        // ),
        // PostFooter(
        //   description: description!,
        //   handleLikePost: handleLikePost,
        //   isLiked: isLiked!,
        //   likeCount: likeCount,
        //   onTapComment: () {},
        //   userName: userName,
        // ),
      ],
    );
  }
}

showComments(
  BuildContext context, {
  required String postId,
  required String ownerId,
  required String mediaUrl,
}) {
  Navigator.push(context, MaterialPageRoute(builder: (context) {
    return CommentsPage(
      postId: postId,
      postOwnerId: ownerId,
      postMediaUrl: mediaUrl,
    );
  }));
}
