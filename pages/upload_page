import 'dart:io';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:geocoding/geocoding.dart';
import 'package:geolocator/geolocator.dart';
import 'package:image_picker/image_picker.dart';
import 'package:killacam_social/models/app_user.dart';
import 'package:killacam_social/pages/splash_page.dart';
import 'package:killacam_social/widgets/upload_form.dart';
import 'package:path_provider/path_provider.dart';
import 'package:image/image.dart' as im;
import 'package:uuid/uuid.dart';
import 'package:firebase_storage/firebase_storage.dart';

import 'home_page.dart';

class UploadPage extends StatefulWidget {
  const UploadPage({
    Key? key,
    this.currentUser,
  }) : super(key: key);

  final AppUser? currentUser;

  @override
  _UploadPageState createState() => _UploadPageState();
}

class _UploadPageState extends State<UploadPage>
    with AutomaticKeepAliveClientMixin<UploadPage> {
  TextEditingController locationController = TextEditingController();
  TextEditingController captionController = TextEditingController();

  bool isUploading = false;
  File? file;
  String postId = const Uuid().v4();

  Future<void> handleTakePhoto() async {
    Navigator.pop(context);
    XFile? pickedFile = await ImagePicker().pickImage(
      imageQuality: 85,
      maxHeight: 675,
      maxWidth: 960,
      source: ImageSource.camera,
    );
    setState(() {
      file = File(pickedFile!.path);
    });
  }

  Future<void> handleChooseFromGallery() async {
    Navigator.pop(context);
    XFile? pickedFile = await ImagePicker().pickImage(
      imageQuality: 85,
      source: ImageSource.gallery,
    );
    setState(() {
      file = File(pickedFile!.path);
    });
  }

  selectImage(parentContext) {
    return showDialog(
        context: parentContext,
        builder: (context) {
          return SimpleDialog(
            title: const Text('Create Post'),
            children: [
              SimpleDialogOption(
                onPressed: handleTakePhoto,
                child: const Text('Photo with Camera'),
              ),
              SimpleDialogOption(
                onPressed: handleChooseFromGallery,
                child: const Text('Image from Gallery'),
              ),
              SimpleDialogOption(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cancel'),
              ),
            ],
          );
        });
  }

  void clearImage() {
    setState(() {
      file = null;
    });
  }

  Future compressImage() async {
    final tempDir = await getTemporaryDirectory();
    final path = tempDir.path;
    im.Image? imageFile = im.decodeImage(file!.readAsBytesSync());
    final compressedImageFile = File('$path/img_$postId.jpg')
      ..writeAsBytesSync(
        im.encodeJpg(
          imageFile!,
          quality: 85,
        ),
      );
    setState(() {
      file = compressedImageFile;
    });
  }

  Future<String> uploadImage(imageFile) async {
    UploadTask uploadTask =
        storageRef.child('post_$postId.jpg').putFile(imageFile);
    TaskSnapshot storageSnap = await uploadTask;
    String downloadUrl = await storageSnap.ref.getDownloadURL();
    return downloadUrl;
  }

  void createPostInFirestore({
    required String mediaUrl,
    String? location,
    String? description,
  }) {
    postsRef
        .doc(widget.currentUser?.id)
        .collection('userPosts')
        .doc(postId)
        .set({
      'postId': postId,
      'ownerId': widget.currentUser?.id,
      'userName': widget.currentUser?.userName,
      'mediaUrl': mediaUrl,
      'description': description,
      'location': location,
      'timestamp': timestamp,
      'likes': {},
    });
  }

  Future<void> handleSubmit() async {
    setState(() {
      isUploading = true;
    });
    await compressImage();
    String mediaUrl = await uploadImage(file);
    createPostInFirestore(
      mediaUrl: mediaUrl,
      location: locationController.text,
      description: captionController.text,
    );
    captionController.clear();
    locationController.clear();
    setState(() {
      file = null;
      isUploading = false;
      postId = const Uuid().v4();
    });
  }

  Future getUserLocation() async {
    Position position = await Geolocator.getCurrentPosition(
      desiredAccuracy: LocationAccuracy.high,
    );

    List<Placemark> placemarks = await placemarkFromCoordinates(
      position.latitude,
      position.longitude,
    );
    Placemark placemark = placemarks[0];
    // String completeAddress =
    //     '${placemark.subThoroughfare} ${placemark.thoroughfare}, ${placemark.subLocality} ${placemark.locality}, ${placemark.subAdministrativeArea}, ${placemark.administrativeArea} ${placemark.postalCode}, ${placemark.country}';
    String formattedAddress = '${placemark.locality}, ${placemark.country}';
    locationController.text = formattedAddress;
  }

  @override
  bool get wantKeepAlive => true;

  @override
  Widget build(BuildContext context) {
    super.build(context);
    return file == null
        ? SplashPage(onPressed: () => selectImage(context))
        : UploadForm(
            captionController: captionController,
            contentImage: file!,
            isUploading: isUploading,
            locationController: locationController,
            onPressedClear: clearImage,
            onPressedLocation: getUserLocation,
            onPressedPost: isUploading ? null : () => handleSubmit(),
            userPhotoUrl: widget.currentUser!.photoUrl,
          );
  }
}
