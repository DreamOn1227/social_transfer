import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/animation.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:killacam_social/models/app_user.dart';
import 'package:killacam_social/pages/profile_page.dart';
import 'package:killacam_social/pages/search_page.dart';
import 'package:killacam_social/pages/upload_page.dart';
import 'package:firebase_storage/firebase_storage.dart';

import 'activity_feed_page.dart';
import 'create_account_page.dart';

final GoogleSignIn googleSignIn = GoogleSignIn();
final Reference storageRef = FirebaseStorage.instance.ref();
final usersRef = FirebaseFirestore.instance.collection('users');
final postsRef = FirebaseFirestore.instance.collection('posts');
final followersRef = FirebaseFirestore.instance.collection('followers');
final followingRef = FirebaseFirestore.instance.collection('following');
final activityFeedRef = FirebaseFirestore.instance.collection('feed');
final commentsRef = FirebaseFirestore.instance.collection('comments');
final DateTime timestamp = DateTime.now();
AppUser? currentUser;

class HomePage extends StatefulWidget {
  const HomePage({
    Key? key,
  }) : super(key: key);

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  bool isAuth = false;
  late PageController pageController;
  int pageIndex = 0;

  @override
  void initState() {
    super.initState();
    pageController = PageController();
    // Detects when user signed in
    googleSignIn.onCurrentUserChanged.listen((account) {
      handleSignIn(account);
    }, onError: (err) {
      print('Error signing in: $err');
    });
    // ReAuthenticate user when app is reopened
    googleSignIn
        .signInSilently(
      suppressErrors: false,
    )
        .then((account) {
      handleSignIn(account);
    }).catchError((err) {
      print('Error signing in: $err');
    });
  }

  handleSignIn(GoogleSignInAccount? account) {
    if (account != null) {
      createUserInFirestore();
      setState(() {
        isAuth = true;
      });
    } else {
      setState(() {
        isAuth = false;
      });
    }
  }

  createUserInFirestore() async {
    final GoogleSignInAccount? user = googleSignIn.currentUser;
    DocumentSnapshot doc = await usersRef.doc(user?.id).get();
    if (!doc.exists) {
      final userName = await Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => const CreateAccountPage(),
        ),
      );

      usersRef.doc(user?.id).set({
        'id': user?.id,
        'userName': userName,
        'photoUrl': user?.photoUrl,
        'email': user?.email,
        'displayName': user?.displayName,
        'bio': '',
        'timestamp': timestamp,
      });

      doc = await usersRef.doc(user?.id).get();
    }

    currentUser = AppUser.fromDocument(doc);
    print(currentUser);
    print(currentUser?.userName);
  }

  void login() {
    googleSignIn.signIn();
  }

  void logout() {
    googleSignIn.signOut();
  }

  void onPageChanged(int pageIndex) {
    setState(() {
      this.pageIndex = pageIndex;
    });
  }

  onTap(int pageIndex) {
    pageController.animateToPage(
      pageIndex,
      curve: Curves.easeInOut,
      duration: const Duration(
        milliseconds: 300,
      ),
    );
  }

  @override
  void dispose() {
    pageController.dispose();
    super.dispose();
  }

  Scaffold buildAuthScreen() {
    return Scaffold(
      body: PageView(
        children: [
          TextButton(
            child: const Text('Logout'),
            onPressed: logout,
          ),
          // TimelinePage(),
          const ActivityFeedPage(),
          UploadPage(
            currentUser: currentUser,
          ),
          const SearchPage(),
          ProfilePage(
            profileId: currentUser?.id,
          ),
        ],
        controller: pageController,
        onPageChanged: onPageChanged,
        physics: const NeverScrollableScrollPhysics(),
      ),
      bottomNavigationBar: CupertinoTabBar(
        activeColor: const Color(0xff271c3b),
        currentIndex: pageIndex,
        onTap: onTap,
        items: const [
          BottomNavigationBarItem(
            icon: Icon(
              Icons.whatshot,
            ),
            label: 'Timeline',
          ),
          BottomNavigationBarItem(
            icon: Icon(
              Icons.notifications_active,
            ),
            label: 'Notifications',
          ),
          BottomNavigationBarItem(
            icon: Icon(
              Icons.photo_camera,
            ),
            label: 'Photo',
          ),
          BottomNavigationBarItem(
            icon: Icon(
              Icons.search,
            ),
            label: 'Search',
          ),
          BottomNavigationBarItem(
            icon: Icon(
              Icons.account_circle,
            ),
            label: 'Profile',
          ),
        ],
      ),
    );
  }

  Scaffold buildUnAuthScreen() {
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topRight,
            end: Alignment.bottomLeft,
            colors: [
              Colors.teal,
              Colors.purple,
            ],
          ),
        ),
        alignment: Alignment.center,
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: <Widget>[
            const Text(
              'KillaCam',
              style: TextStyle(
                fontFamily: "Signatra",
                fontSize: 85.0,
                color: Colors.white,
              ),
            ),
            GestureDetector(
              onTap: login,
              child: Container(
                width: 260.0,
                height: 60.0,
                decoration: const BoxDecoration(
                  image: DecorationImage(
                    image: AssetImage(
                      'assets/images/google_signin_button.png',
                    ),
                    fit: BoxFit.cover,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return isAuth ? buildAuthScreen() : buildUnAuthScreen();
  }
}

// Scaffold(
// body: PageView(
// children: [
// TextButton(
// child: const Text('Logout'),
// onPressed: logout,
// ),
// // TimelinePage(),
// const ActivityFeedPage(),
// const UploadPage(),
// const SearchPage(),
// const ProfilePage(),
// ],
// controller: pageController,
// onPageChanged: onPageChanged,
// physics: const NeverScrollableScrollPhysics(),
// ),
// bottomNavigationBar: BottomNavigationBar(
// currentIndex: pageIndex,
// onTap: onTap,
// showUnselectedLabels: true,
// selectedItemColor: Theme.of(context).primaryColor,
// unselectedItemColor: Colors.grey,
// items: const [
// BottomNavigationBarItem(
// icon: Icon(
// Icons.whatshot,
// ),
// label: 'Timeline',
// ),
// BottomNavigationBarItem(
// icon: Icon(
// Icons.notifications_active,
// ),
// label: 'Notifications',
// ),
// BottomNavigationBarItem(
// icon: Icon(
// Icons.photo_camera,
// ),
// label: 'Photo',
// ),
// BottomNavigationBarItem(
// icon: Icon(
// Icons.search,
// ),
// label: 'Search',
// ),
// BottomNavigationBarItem(
// icon: Icon(
// Icons.account_circle,
// ),
// label: 'Profile',
// ),
// ]),
// )
